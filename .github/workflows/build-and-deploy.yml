name: Serverless Build and Deploy

on:
  push:
    branches:
      - 'f1'
      - 'f2'
      - 'f3'
      - 'f4'
      - 'f5'
      - 'f6'
      - 'f7'
  workflow_dispatch: {}   # auto-merge up-to-date case me force trigger

# repo-wide single deploy at a time (CFN contention se bachne ke liye)
concurrency:
  group: serverless-deploy
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        serverless: [part1, part2, part3]
      max-parallel: 1   # ⏳ part1 → part2 → part3 (strict sequential)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Derive stage from branch
        id: stage
        shell: bash
        run: |
          REF="${GITHUB_REF_NAME}"
          STAGE="$REF"
          case "$REF" in
            f1) STAGE="feature1" ;;
            f2) STAGE="feature2" ;;
            f3) STAGE="feature3" ;;
            f4) STAGE="feature4" ;;
            f5) STAGE="feature5" ;;
            f6) STAGE="feature6" ;;
            f7) STAGE="feature7" ;;
          esac
          echo "BRANCH_NAME=$STAGE" >> $GITHUB_ENV
          echo "stage=$STAGE" >> $GITHUB_OUTPUT
          echo "Using stage: $STAGE"

      - name: Install deps (if package.json exists)
        shell: bash
        run: |
          if [ -f package.json ]; then
            if [ -f package-lock.json ]; then
              npm ci --no-audit --no-fund
            else
              npm i --no-audit --no-fund
            fi
          fi

      - name: Deploy ${{ matrix.serverless }}
        shell: bash
        run: |
          echo "Deploying ${{ matrix.serverless }} to stage ${{ env.BRANCH_NAME }} ..."
          # agar repo me local serverless devDependency hai to npx use karein:
          if npx --yes --version >/dev/null 2>&1; then
            npx serverless deploy --stage "${{ env.BRANCH_NAME }}" --verbose
          else
            npm i -g serverless
            serverless deploy --stage "${{ env.BRANCH_NAME }}" --verbose
          fi

      - name: Prune old versions
        shell: bash
        run: |
          echo "Pruning old versions on stage ${{ env.BRANCH_NAME }} ..."
          if npx --yes --version >/dev/null 2>&1; then
            npx serverless prune -n 3 --stage "${{ env.BRANCH_NAME }}"
          else
            serverless prune -n 3 --stage "${{ env.BRANCH_NAME }}"
          fi

name: Serverless Build and Deploy - Final

on:
  push:
    branches:
      - 'f1'
      - 'f2' 
      - 'f3'
      - 'f4'
      - 'f5'
      - 'f6'
      - 'f7'
      - 'dev'

# Repository-level concurrency - Only one deployment at a time
concurrency:
  group: sls-deploy-${{ github.repository }}
  cancel-in-progress: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        serverless: [part1, part2, part3]
      max-parallel: 1  # Sequential serverless parts
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Extract branch name
        run: |
          if [[ "${{github.ref}}" == "refs/heads/dev" ]]; then
            echo "BRANCH_NAME=develop" >> $GITHUB_ENV
          elif [[ "${{github.ref}}" == "refs/heads/f1" ]]; then
            echo "BRANCH_NAME=feature1" >> $GITHUB_ENV
          elif [[ "${{github.ref}}" == "refs/heads/f2" ]]; then
            echo "BRANCH_NAME=feature2" >> $GITHUB_ENV
          elif [[ "${{github.ref}}" == "refs/heads/f3" ]]; then
            echo "BRANCH_NAME=feature3" >> $GITHUB_ENV
          elif [[ "${{github.ref}}" == "refs/heads/f4" ]]; then
            echo "BRANCH_NAME=feature4" >> $GITHUB_ENV
          elif [[ "${{github.ref}}" == "refs/heads/f5" ]]; then
            echo "BRANCH_NAME=feature5" >> $GITHUB_ENV
          elif [[ "${{github.ref}}" == "refs/heads/f6" ]]; then
            echo "BRANCH_NAME=feature6" >> $GITHUB_ENV
          elif [[ "${{github.ref}}" == "refs/heads/f7" ]]; then
            echo "BRANCH_NAME=feature7" >> $GITHUB_ENV
          fi
          
      - name: Install dependencies
        run: npm install --legacy-peer-deps --force
        
      - name: Install Serverless and Plugins
        run: |
          npm install -g serverless@3
          npm install -g serverless-prune-plugin@2.0.0 --force
        
      - name: Copy Serverless Config
        run: |
          if [[ "${{ matrix.serverless }}" == "part1" ]]; then
            cp serverless-part1.yml serverless.yml
          elif [[ "${{ matrix.serverless }}" == "part2" ]]; then
            cp serverless-part2.yml serverless.yml
          elif [[ "${{ matrix.serverless }}" == "part3" ]]; then
            cp serverless-part3.yml serverless.yml
          fi
          
      - name: Copy Secrets
        run: |
          if [[ "${{ env.BRANCH_NAME }}" == "develop" ]]; then
            cp .secrets.develop.yml .secrets.yml
          elif [[ "${{ env.BRANCH_NAME }}" == "feature1" ]]; then
            cp .secrets.feature1.yml .secrets.yml
          elif [[ "${{ env.BRANCH_NAME }}" == "feature2" ]]; then
            cp .secrets.feature2.yml .secrets.yml
          elif [[ "${{ env.BRANCH_NAME }}" == "feature3" ]]; then
            cp .secrets.feature3.yml .secrets.yml
          elif [[ "${{ env.BRANCH_NAME }}" == "feature4" ]]; then
            cp .secrets.feature4.yml .secrets.yml
          elif [[ "${{ env.BRANCH_NAME }}" == "feature5" ]]; then
            cp .secrets.feature5.yml .secrets.yml
          elif [[ "${{ env.BRANCH_NAME }}" == "feature6" ]]; then
            cp .secrets.feature6.yml .secrets.yml
          elif [[ "${{ env.BRANCH_NAME }}" == "feature7" ]]; then
            cp .secrets.feature7.yml .secrets.yml
          fi
          
      - name: Sleep for part2 and part3 (Company simulation)
        if: matrix.serverless == 'part2' || matrix.serverless == 'part3'
        run: sleep 180
        
      - name: Echo deployment info
        run: |
          echo "Deploying branch: ${{ env.BRANCH_NAME }}"
          echo "Serverless part: ${{ matrix.serverless }}"
          
      - name: Serverless Deploy
        run: |
          echo "Starting AWS deployment..."
          serverless deploy --stage ${{ env.BRANCH_NAME }} --verbose
          
      - name: Serverless Prune (Company behavior)
        run: |
          echo "Running serverless prune..."
          serverless prune -n 3 --stage ${{ env.BRANCH_NAME }}
          
      - name: Deployment Success
        run: |
          echo "Successfully deployed serverless ${{ matrix.serverless }} to stage ${{ env.BRANCH_NAME }}"
          aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --region us-east-1